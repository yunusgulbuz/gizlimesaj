const express = require('express');
const crypto = require('crypto');
const net = require('net');

const app = express();
const port = 3000;

function getClientIp(req) {
    const headers = [
        'x-client-ip',
        'x-forwarded-for',
        'x-forwarded',
        'x-cluster-client-ip',
        'forwarded-for',
        'forwarded',
    ];

    for (const header of headers) {
        if (req.headers[header]) {
            const ipList = req.headers[header].split(',');
            const ip = ipList[0].trim();
            if (net.isIP(ip)) {
                return ip;
            }
        }
    }

    if (req.socket && req.socket.remoteAddress) {
        const remoteAddress = req.socket.remoteAddress;
        // Handle IPv6-mapped IPv4 addresses
        if (remoteAddress.substr(0, 7) == "::ffff:") {
            const ipv4 = remoteAddress.substr(7)
            if (net.isIP(ipv4)) {
                return ipv4;
            }
        }
        if (net.isIP(remoteAddress)) {
            return remoteAddress;
        }
    }

    return 'UNKNOWN';
}

function generatePaymentForm(cardHolderIP) {
    // 1. Define your payment parameters using the new values
    const sx = "118591467|bScbGDYCtPf7SS1N6PQ6/+58rFhW1WpsWINqvkJFaJlu6bMH2tgPKDQtjeA5vClpzJP24uA0vx7OX53cP3SgUspa4EvYix+1C3aXe++8glUvu9Oyyj3v300p5NP7ro/9K57Zcw==";
    const merchantSecretKey = "_YckdxUbv4vrnMUZ6VQsr"; // Your unique secret key
    const successUrl = "https://paynkolay.com.tr/test/success";
    const failUrl = "https://paynkolay.com.tr/test/fail";
    const amount = "1.00";
    const clientRefCode = "2352345";
    const use3D = "true";
    const agentCode = "1236";
    const transactionType = "sales";
    const customerKey = "";

    // Helper function to format the date as "dd.mm.yyyy HH:MM:SS"
    const getFormattedDate = () => {
        const now = new Date();
        const pad = (num) => num.toString().padStart(2, '0');

        const day = pad(now.getDate());
        const month = pad(now.getMonth() + 1); // Months are 0-indexed
        const year = now.getFullYear();

        const hours = pad(now.getHours());
        const minutes = pad(now.getMinutes());
        const seconds = pad(now.getSeconds());

        return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
    };

    const rnd = getFormattedDate();

    // 2. Create the hash string by concatenating the values
    // The order of concatenation is crucial.
    const hashStrParts = [
        sx,
        clientRefCode,
        amount,
        successUrl,
        failUrl,
        rnd,
        customerKey,
        cardHolderIP, // Added IP here
        merchantSecretKey
    ];
    const hashStr = hashStrParts.join("|");

    // 3. Calculate the SHA-512 hash and then Base64 encode it
    const hash = crypto.createHash('sha512');
    hash.update(hashStr, 'utf-8');
    const hashDataV2 = hash.digest('base64');

    // 4. Generate the HTML content using a template literal
    const htmlContent = `
<!doctype html>
<html>
<head>
<title>Sanal POS entegrasyonu örnek Node.js sayfamız</title>
<meta charset="utf-8">
</head>
<body>

<h2>Payment Form (Generated by Node.js)</h2>
<p>Your IP address is: ${cardHolderIP}</p>
<p>Click the button below to proceed to the payment page.</p>

<form method="post" action="https://paynkolaytest.nkolayislem.com.tr/Vpos">
  <input type="hidden" name="sx" value="${sx}">
  <input type="hidden" name="successUrl" value="${successUrl}">
  <input type="hidden" name="failUrl" value="${failUrl}">
  <input type="hidden" name="amount" value="${amount}">
  <input type="hidden" name="clientRefCode" value="${clientRefCode}">
  <input type="hidden" name="use3D" value="${use3D}">
  <input type="hidden" name="rnd" value="${rnd}">
  <input type="hidden" name="agentCode" value="${agentCode}">
  <input type="hidden" name="transactionType" value="${transactionType}">
  <input type="hidden" name="cardHolderIP" value="${cardHolderIP}">
  <input type="hidden" name="hashDataV2" value="${hashDataV2}">
  <input type="submit" value="Gönder" style="padding: 10px 20px; font-size: 16px; cursor: pointer;" />
</form>

</body>
</html>
`;

    return htmlContent;
}

app.get('/payment', (req, res) => {
  const ip = getClientIp(req);
  const htmlForm = generatePaymentForm(ip);
  res.send(htmlForm);
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
  console.log(`Access the payment form at http://localhost:${port}/payment`);
});


ornek php:
<!doctype html>
<html>
<head>
<title>Sanal POS entegrasyonu örnek PHP sayfamız</title>
<meta charset="utf-8">
</head>
<body>

<?php
// sx değeriniz size verilecektir
$sx="118591467|bScbGDYCtPf7SS1N6PQ6/+58rFhW1WpsWINqvkJFaJlu6bMH2tgPKDQtjeA5vClpzJP24uA0vx7OX53cP3SgUspa4EvYix+1C3aXe++8glUvu9Oyyj3v300p5NP7ro/9K57Zcw==";
$merchantSecretKey="_YckdxUbv4vrnMUZ6VQsr"; // size özel - special to you
$successUrl="https://paynkolay.com.tr/test/success";
$failUrl="https://paynkolay.com.tr/test/fail";
$amount="1.00";
$clientRefCode="2352345";
$use3D="true";
$rnd = date("d.m.Y H:i:s");
$agentCode="1236";
$detail="false";
$transactionType="sales";
$customerKey = "";
$hashstr = $sx . "|" . $clientRefCode . "|" . $amount . "|" . $successUrl . "|" . $failUrl . "|" . $rnd . "|" . $customerKey . "|" . $merchantSecretKey;

$hash = mb_convert_encoding($hashstr, 'UTF-8');
$hashedBytes = hash("sha512", $hash, true);
$hashDataV2 = base64_encode($hashedBytes);

function getClientIpAddress(): string
{
    // A list of headers to check in order of priority
    $headers = [
        'HTTP_CLIENT_IP',
        'HTTP_X_FORWARDED_FOR',
        'HTTP_X_FORWARDED',
        'HTTP_X_CLUSTER_CLIENT_IP',
        'HTTP_FORWARDED_FOR',
        'HTTP_FORWARDED',
        'REMOTE_ADDR'
    ];

    foreach ($headers as $header) {
        if (isset($_SERVER[$header])) {
            // HTTP_X_FORWARDED_FOR can contain a comma-separated list of IPs.
            // The first one is the original client IP.
            $ipList = explode(',', $_SERVER[$header]);
            $ip = trim($ipList[0]);

            // Validate the IP address
            if (filter_var($ip, FILTER_VALIDATE_IP)) {
                return $ip;
            }
        }
    }

    return 'UNKNOWN';
}

// How to use the function
$cardHolderIP = getClientIpAddress();

?>

<form method="post" action="https://paynkolaytest.nkolayislem.com.tr/Vpos">
  <input type="hidden" name="sx" value="<?= $sx ?>">
  <input type="hidden" name="successUrl" value="<?= $successUrl ?>">
  <input type="hidden" name="failUrl" value="<?= $failUrl ?>">
  <input type="hidden" name="amount" value="<?= $amount ?>">
  <input type="hidden" name="clientRefCode" value="<?= $clientRefCode ?>">
  <input type="hidden" name="use3D" value="<?= $use3D ?>">
  <input type="hidden" name="rnd" value="<?= $rnd ?>">
  <input type="hidden" name="agentCode" value="<?= $agentCode ?>">
  <input type="hidden" name="transactionType" value="<?= $transactionType ?>">
  <input type="hidden" name="hashDataV2" value="<?= $hashDataV2 ?>">
  <input type="hidden" name="cardHolderIP" value="<?= $cardHolderIP ?>">
  <input type="submit" value="Gönder" />
</form>

</body>
</html>